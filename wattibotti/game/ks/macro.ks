[eval exp="tf.debug = almight.debug; almight.debug = 0;"]

// =========================
// Almight マクロ集 v4.0
// =========================

// ===== メッセージ操作 =====

// 改ページする（クリック待ち）
// [c]

[macro name="c"]
	[endhact]
	[ws canskip=true cond="almight.stage.autoMode"]
	[p]
	[cm]
	[stop_voice]
	[seopt buf=2 gvolume=100 cond="f.bgv_pause==true"]
[endmacro]


// 改行する（クリック待ち）
// [m]

[macro name="m"]
	[endhact]
	[l][r]
[endmacro]


// メッセージレイヤーのタイプを変更する
// [type_msg type="fullまたはadv"]
//
// 	typeにfullを指定すると、サウンドノベル風に全画面にメッセージレイヤーが表示されるタイプになります
// 	typeにadvを指定すると、アドベンチャーゲーム風にテキスト枠が表示されるタイプになります
// 	変更した後は、[action]を使って実行して下さい
// 	また、full、adv、それぞれでフォントのサイズ等を変更したい場合は、それぞれのdeffontを変更して使用して下さい。
[macro name="type_msg"]
	[if exp="mp.type == 'full'"]
		[current page="back"]
		[deffont bold=true color="#ffffff" size=24][resetfont][current page="fore"]
		[cm]
		[position layer="message0" page="back" frame="" visible=true color="#000000" opacity=100 top=0 left=0 width=1024 height=768 marginl=150 margint=40 marginr=150 marginb=40]
	[endif]
	[if exp="mp.type == 'adv'"]
		[current page="back"]
		[deffont bold=true color="#ffffff" size=24][resetfont][current page="fore"]
		[cm]
		[position layer="message0" page="back" frame="" visible=true color="#000000" opacity=100 top=530 left=0 width=1024 height=238 marginl=160 margint=30 marginr=160 marginb=30]
	[endif]
[endmacro]

// メッセージレイヤーを表示状態にする
// [show_msg]
//
// 	このあと、[action]を使って実行して下さい

[macro name="show_msg"]
	[position layer="message0" page="back" visible=true]
[endmacro]

// メッセージレイヤーを非表示状態にする
// [hide_msg]
//
// 	このあと、[action]を使って実行して下さい

[macro name="hide_msg"]
	[position layer="message0" page="back" visible=false]
[endmacro]


// ===== 画像操作 =====

// 背景を読み込む
// [show_bg file="ファイル名"]
//
// 	背景を読み込みます．その後、[action]を使って実行してください。
// 	jpgの場合のみ拡張子は省略可能になります

[macro name="show_bg"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.jpg' : mp.file"]
	[image storage="%file" page="back" layer="base"]
[endmacro]


// イベントCGを読み込む
// [show_ev file="ファイル名"]
//
// 	背景レイヤーにイベントCGを読み込みます。同時に、システム変数にファイル名と同名のシステム変数を作成し、trueを代入します。
// 	その後、[action]を使って実行してください。
// 	jpgの場合のみ拡張子は省略可能になります
[macro name="show_ev"]
	[eval exp="tf.file = (mp.file.indexOf('.') === -1) ? mp.file : mp.file.substring(0,mp.file.indexOf('.'))"]
	[eval exp="sf[tf.file]=true"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.jpg' : mp.file"]
	[image storage="%file" page="back" layer="base"]
[endmacro]

// 背景を非表示にする
// [hide_bg]
//
// 	背景を非表示にします。その後、[action]を使って実行してください。

[macro name="hide_bg"]
	[freeimage layer="base" page="back"]
[endmacro]

// 立ち絵などの画像を読み込む
// 左端  [show_l file="ファイル名"]
// 右端  [show_r file="ファイル名"]
// 左寄り [show_lc file="ファイル名"]
// 右寄り [show_rc file="ファイル名"]
// 中心 [show_c file="ファイル名"]
//
// 	立ち絵を読み込みます。その後、[action]を使って実行してください。
// 	pngの場合のみ拡張子は省略可能になります

[macro name="show_l"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.png' : mp.file"]
	[image layer=1 page="back" storage="%file" pos="left" visible=true]
[endmacro]

[macro name="show_r"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.png' : mp.file"]
	[image layer=2 page="back" storage="%file" pos="right" visible=true]
[endmacro]

[macro name="show_lc"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.png' : mp.file"]
	[image layer=3 page="back" storage="%file" pos="left_center" visible=true]
[endmacro]

[macro name="show_rc"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.png' : mp.file"]
	[image layer=4 page="back" storage="%file" pos="right_center" visible=true]
[endmacro]

[macro name="show_c"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.png' : mp.file"]
	[image layer=5 page="back" storage="%file" pos="center" visible=true]
[endmacro]

// 立ち絵などの画像を非表示にする
// 左端  [hide_l]
// 右端  [hide_r]
// 左寄り [hide_lc]
// 右寄り [hide_rc]
// 中心 [hide_c]
// すべて消す [hide_all]
//
// 	立ち絵を非表示属性にします。その後、[action]を使って実行してください。

[macro name="hide_l"]
	[freeimage layer=1 page="back"]
[endmacro]

[macro name="hide_r"]
	[freeimage layer=2 page="back"]
[endmacro]

[macro name="hide_lc"]
	[freeimage layer=3 page="back"]
[endmacro]

[macro name="hide_rc"]
	[freeimage layer=4 page="back"]
[endmacro]

[macro name="hide_c"]
	[freeimage layer=5 page="back"]
[endmacro]

[macro name="hide_all"]
	[freeimage all=true page="back"]
[endmacro]

// フラッシュの画面効果を行います。
// [flash file="ファイル名" (color="フラッシュの色を指定" target="fore(デフォルト)またはback" time="フラッシュ画像の表示時間|500(デフォルト)"]
//
// colorにはフラッシュする際の色を指定できます。[0xRRGGBB]かCSSのcolorに指定出来る形式で指定してください。省略した場合は白色になります。
// fileに画像ファイルを指定するとフラッシュ効果に使う画像を変更できます。省略すると白画像になります。
// targetをforeに指定すると立ち絵の上でフラッシュします。メッセージレイヤーは非表示となります。
// targetをbackに指定すると立ち絵の後ろでフラッシュします。メッセージレイヤーは表示されたままになります。
// timeに時間を指定すると、フラッシュで表示される白画像の表示時間を指定できます。省略すると500ミリ秒になります。。
// [action]を使って実行させて下さい。

[macro name="flash"]
	[eval exp="tf.flash_time = (mp.time == undefined) ? 500 : mp.time"]
	[if exp="mp.target == 'fore' || mp.target == undefined"]
		[if exp="mp.file==undefined"]
			[layopt layer="message0" page="fore" visible=false]
			[fillrect layer=7 page="fore" width=1024 height=768 color="%color|0xffffff"]
			[layopt layer=7 page="fore" visible=true]
		[else]
			[layopt layer="message0" page="fore" visible=false]
			[image storage="%file" layer=7 page="fore" visible=true]
		[endif]
	[endif]
	[if exp="mp.target == 'back'"]
		[if exp="mp.file == undefined"]
			[fillrect layer=0 page="fore" width=1024 height=768 color="%color|0xffffff"]
			[layopt layer=0 page="fore" visible=true]
			[backlay layer="message0"]
		[else]
			[image storage="%file" layer=0 page="fore" visible=true]
			[backlay layer="message0"]
		[endif]
	[endif]
[endmacro]

// 処理を実行する
// [action (time="フェード時間" rule="ルール画像のファイル名" skip="trueまたはfalse(デフォルト)")]
//
// 	画像処理を実行します。全て省略すると、1秒かけてクロスフェードで実行されます。
// 	ルール画像を指定すると、そのルール画像でフェードします。ルール画像はpngの場合のみ拡張子は省略可能になります
// 	なお、メッセージレイヤーはルール画像を指定してもクロスフェードで実行されます。
// 	skipにtrueを指定すると、フェード処理とフラッシュ効果とがクリックでスキップ可能になります

[macro name="action"]
	[if exp="tf.flash_time != undefined"]
		[wait time="&tf.flash_time" canskip="%skip|false"]
		[layopt layer="message0" page="back" visible=true]
		[eval exp="tf.flash_time = undefined"]
	[endif]
	[if exp="mp.time == 0"]
		[forelay]
	[else]
		[if exp="mp.rule != undefined"]
			[eval exp="mp.rule = (mp.rule.indexOf('.') === -1) ? mp.rule + '.png' : mp.rule"]
			[trans method="universal" rule="%rule" time="%time|1000"]
		[else]
			[trans method="crossfade" time="%time|1000"]
		[endif]
		[wt canskip="%skip|false"]
	[endif]
[endmacro]

// 立ち絵の移動先のポジションをシステム変数に代入
[eval exp="sf.pos_l = Math.round(almight.config.position.left - almight.config.position.center)"]
[eval exp="sf.pos_r = Math.round(almight.config.position.right - almight.config.position.center)"]
[eval exp="sf.pos_lc = Math.round(almight.config.position.left_center - almight.config.position.center)"]
[eval exp="sf.pos_rc = Math.round(almight.config.position.right_center - almight.config.position.center)"]
[eval exp="sf.pos_c = Math.round(almight.config.position.center - almight.config.position.center)"]

// 立ち絵画像をフレームインさせる
// [framein file="ファイル名" from="フレームインさせる方向" pos="移動先のポジション" (time="移動時間|1000(デフォルト)" easing="実行スピードパターン)"]
//
// timeに実行時間を指定できます。省略した場合は1000ミリ秒となります。
// fromには"top","left","bottom","right"が指定できます。"left"を指定すると左からフレームインします。
// posには"left","right","left_center","right_center","center"を指定できます。フレームインした立ち絵画像が指定したポジションで停止します。
// easingには実行スピードのパターンを指定できます。省略した場合は一定の速度で動きます。
// pngの場合のみ拡張子は省略可能になります
[macro name="framein"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.png' : mp.file"]
	[if exp="mp.from == 'right' && mp.file != undefined"]
		[eval exp="tf.from_r = true"]
		[if exp="mp.pos=='left' || mp.pos=='l'"]
			[image storage="&mp.file" layer=1 page="fore" left=1024 top=0 visible=true]
			[eval exp="tf.from_r_pos_l = true"]
			[eval exp="tf.from_r_pos_l_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_r_pos_l_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right' || mp.pos=='r'"]
			[image storage="&mp.file" layer=2 page="fore" left=1024 top=0 visible=true]
			[eval exp="tf.from_r_pos_r = true"]
			[eval exp="tf.from_r_pos_r_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_r_pos_r_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='left_center' || mp.pos=='lc'"]
			[image storage="&mp.file" layer=3 page="fore" left=1024 top=0 visible=true]
			[eval exp="tf.from_r_pos_lc = true"]
			[eval exp="tf.from_r_pos_lc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_r_pos_lc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right_center' || mp.pos=='rc'"]
			[image storage="&mp.file" layer=4 page="fore" left=1024 top=0 visible=true]
			[eval exp="tf.from_r_pos_rc = true"]
			[eval exp="tf.from_r_pos_rc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_r_pos_rc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='center' || mp.pos=='c'"]
			[image storage="&mp.file" layer=5 page="fore" left=1024 top=0 visible=true]
			[eval exp="tf.from_r_pos_c = true"]
			[eval exp="tf.from_r_pos_c_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_r_pos_c_easing = mp.easing"]
		[endif]
	[elsif exp="mp.from == 'bottom' && mp.file != undefined"]
		[eval exp="tf.from_b = true"]
		[if exp="mp.pos=='left' || mp.pos=='l'"]
			[image storage="&mp.file" layer=1 page="fore" left="&sf.pos_l" top=768 visible=true]
			[eval exp="tf.from_b_pos_l = true"]
			[eval exp="tf.from_b_pos_l_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_b_pos_l_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right' || mp.pos=='r'"]
			[image storage="&mp.file" layer=2 page="fore" left="&sf.pos_r" top=768 visible=true]
			[eval exp="tf.from_b_pos_r = true"]
			[eval exp="tf.from_b_pos_r_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_b_pos_r_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='left_center' || mp.pos=='lc'"]
			[image storage="&mp.file" layer=3 page="fore" left="&sf.pos_lc" top=768 visible=true]
			[eval exp="tf.from_b_pos_lc = true"]
			[eval exp="tf.from_b_pos_lc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_b_pos_lc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right_center' || mp.pos=='rc'"]
			[image storage="&mp.file" layer=4 page="fore" left="&sf.pos_rc" top=768 visible=true]
			[eval exp="tf.from_b_pos_rc = true"]
			[eval exp="tf.from_b_pos_rc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_b_pos_rc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='center' || mp.pos=='c'"]
			[image storage="&mp.file" layer=5 page="fore" left="&sf.pos_c" top=768 visible=true]
			[eval exp="tf.from_b_pos_c = true"]
			[eval exp="tf.from_b_pos_c_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_b_pos_c_easing = mp.easing"]
		[endif]
	[elsif exp="mp.from == 'left' && mp.file != undefined"]
		[eval exp="tf.from_l = true"]
		[if exp="mp.pos=='left' || mp.pos=='l'"]
			[image storage="&mp.file" layer=1 page="fore" left="-1024" top=0 visible=true]
			[eval exp="tf.from_l_pos_l = true"]
			[eval exp="tf.from_l_pos_l_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_l_pos_l_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right' || mp.pos=='r'"]
			[image storage="&mp.file" layer=2 page="fore" left="-1024" top=0 visible=true]
			[eval exp="tf.from_l_pos_r = true"]
			[eval exp="tf.from_l_pos_r_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_l_pos_r_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='left_center' || mp.pos=='lc'"]
			[image storage="&mp.file" layer=3 page="fore" left="-1024" top=0 visible=true]
			[eval exp="tf.from_l_pos_lc = true"]
			[eval exp="tf.from_l_pos_lc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_l_pos_lc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right_center' || mp.pos=='rc'"]
			[image storage="&mp.file" layer=4 page="fore" left="-1024" top=0 visible=true]
			[eval exp="tf.from_l_pos_rc = true"]
			[eval exp="tf.from_l_pos_rc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_l_pos_rc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='center' || mp.pos=='c'"]
			[image storage="&mp.file" layer=5 page="fore" left="-1024" top=0 visible=true]
			[eval exp="tf.from_l_pos_c = true"]
			[eval exp="tf.from_l_pos_c_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_l_pos_c_easing = mp.easing"]
		[endif]
	[elsif exp="mp.from == 'top' && mp.file != undefined"]
		[eval exp="tf.from_t = true"]
		[if exp="mp.pos=='left' || mp.pos=='l'"]
			[image storage="&mp.file" layer=1 page="fore" left="&sf.pos_l" top="-768" visible=true]
			[eval exp="tf.from_t_pos_l = true"]
			[eval exp="tf.from_t_pos_l_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_t_pos_l_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right' || mp.pos=='r'"]
			[image storage="&mp.file" layer=2 page="fore" left="&sf.pos_r" top="-768" visible=true]
			[eval exp="tf.from_t_pos_r = true"]
			[eval exp="tf.from_t_pos_r_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_t_pos_r_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='left_center' || mp.pos=='lc'"]
			[image storage="&mp.file" layer=3 page="fore" left="&sf.pos_lc" top="-768" visible=true]
			[eval exp="tf.from_t_pos_lc = true"]
			[eval exp="tf.from_t_pos_lc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_t_pos_lc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right_center' || mp.pos=='rc'"]
			[image storage="&mp.file" layer=4 page="fore" left="&sf.pos_rc" top="-768" visible=true]
			[eval exp="tf.from_t_pos_rc = true"]
			[eval exp="tf.from_t_pos_rc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_t_pos_rc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='center' || mp.pos=='c'"]
			[image storage="&mp.file" layer=5 page="fore" left="&sf.pos_c" top="-768" visible=true]
			[eval exp="tf.from_t_pos_c = true"]
			[eval exp="tf.from_t_pos_c_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.from_t_pos_c_easing = mp.easing"]
		[endif]
	[endif]
[endmacro]

//　[framein]タグで設定したものを実行する
// [framein_action skip="trueかfalse(デフォルト)"]
//
// skipにtrueを指定するとクリックで移動アニメーションをスキップすることができます。省略するとfalseになります。
[macro name="framein_action"]
	[if exp="tf.from_l == true"]
		[if exp="tf.from_l_pos_l == true"]
			[anim layer=1 page="fore" time="&tf.from_l_pos_l_time" left="&sf.pos_l" easing="&tf.from_l_pos_l_easing"]
			[animstart layer=1 page="fore"]
		[endif]
		[if exp="tf.from_l_pos_r == true"]
			[anim layer=2 page="fore" time="&tf.from_l_pos_r_time" left="&sf.pos_r" easing="&tf.from_l_pos_r_easing"]
			[animstart layer=2 page="fore"]
		[endif]
		[if exp="tf.from_l_pos_lc == true"]
			[anim layer=3 page="fore" time="&tf.from_l_pos_lc_time" left="&sf.pos_lc" easing="&tf.from_l_pos_lc_easing"]
			[animstart layer=3 page="fore"]
		[endif]
		[if exp="tf.from_l_pos_rc == true"]
			[anim layer=4 page="fore" time="&tf.from_l_pos_rc_time" left="&sf.pos_rc" easing="&tf.from_l_pos_rc_easing"]
			[animstart layer=4 page="fore"]
		[endif]
		[if exp="tf.from_l_pos_c == true"]
			[anim layer=5 page="fore" time="&tf.from_l_pos_c_time" left="&sf.pos_c" easing="&tf.from_l_pos_c_easing"]
			[animstart layer=5 page="fore"]
		[endif]
	[endif]
	[if exp="tf.from_t == true"]
		[if exp="tf.from_t_pos_l == true"]
			[anim layer=1 page="fore" time="&tf.from_t_pos_l_time" top=0 easing="&tf.from_t_pos_l_easing"]
			[animstart layer=1 page="fore"]
		[endif]
		[if exp="tf.from_t_pos_r == true"]
			[anim layer=2 page="fore" time="&tf.from_t_pos_r_time" top=0 easing="&tf.from_t_pos_r_easing"]
			[animstart layer=2 page="fore"]
		[endif]
		[if exp="tf.from_t_pos_lc == true"]
			[anim layer=3 page="fore" time="&tf.from_t_pos_lc_time" top=0 easing="&tf.from_t_pos_lc_easing"]
			[animstart layer=3 page="fore"]
		[endif]
		[if exp="tf.from_t_pos_rc == true"]
			[anim layer=4 page="fore" time="&tf.from_t_pos_rc_time" top=0 easing="&tf.from_t_pos_rc_easing"]
			[animstart layer=4 page="fore"]
		[endif]
		[if exp="tf.from_t_pos_c == true"]
			[anim layer=5 page="fore" time="&tf.from_t_pos_c_time" top=0 easing="&tf.from_t_pos_c_easing"]
			[animstart layer=5 page="fore"]
		[endif]
	[endif]
	[if exp="tf.from_r == true"]
		[if exp="tf.from_r_pos_l == true"]
			[anim layer=1 page="fore" time="&tf.from_r_pos_l_time" left="&sf.pos_l" easing="&tf.from_r_pos_l_easing"]
			[animstart layer=1 page="fore"]
		[endif]
		[if exp="tf.from_r_pos_r == true"]
			[anim layer=2 page="fore" time="&tf.from_r_pos_r_time" left="&sf.pos_r" easing="&tf.from_r_pos_r_easing"]
			[animstart layer=2 page="fore"]
		[endif]
		[if exp="tf.from_r_pos_lc == true"]
			[anim layer=3 page="fore" time="&tf.from_r_pos_lc_time" left="&sf.pos_lc" easing="&tf.from_r_pos_lc_easing"]
			[animstart layer=3 page="fore"]
		[endif]
		[if exp="tf.from_r_pos_rc == true"]
			[anim layer=4 page="fore" time="&tf.from_r_pos_rc_time" left="&sf.pos_rc" easing="&tf.from_r_pos_rc_easing"]
			[animstart layer=4 page="fore"]
		[endif]
		[if exp="tf.from_r_pos_c == true"]
			[anim layer=5 page="fore" time="&tf.from_r_pos_c_time" left="&sf.pos_c" easing="&tf.from_r_pos_c_easing"]
			[animstart layer=5 page="fore"]
		[endif]
	[endif]
	[if exp="tf.from_b == true"]
		[if exp="tf.from_b_pos_l == true"]
			[anim layer=1 page="fore" time="&tf.from_b_pos_l_time" top=0 easing="&tf.from_b_pos_l_easing"]
			[animstart layer=1 page="fore"]
		[endif]
		[if exp="tf.from_b_pos_r == true"]
			[anim layer=2 page="fore" time="&tf.from_b_pos_r_time" top=0 easing="&tf.from_b_pos_r_easing"]
			[animstart layer=2 page="fore"]
		[endif]
		[if exp="tf.from_b_pos_lc == true"]
			[anim layer=3 page="fore" time="&tf.from_b_pos_lc_time" top=0 easing="&tf.from_b_pos_lc_easing"]
			[animstart layer=3 page="fore"]
		[endif]
		[if exp="tf.from_b_pos_rc == true"]
			[anim layer=4 page="fore" time="&tf.from_b_pos_rc_time" top=0 easing="&tf.from_b_pos_rc_easing"]
			[animstart layer=4 page="fore"]
		[endif]
		[if exp="tf.from_b_pos_c == true"]
			[anim layer=5 page="fore" time="&tf.from_b_pos_c_time" top=0 easing="&tf.from_b_pos_c_easing"]
			[animstart layer=5 page="fore"]
		[endif]
	[endif]
	[if exp="tf.from_r_pos_l!=undefined || tf.from_b_pos_l!=undefined || tf.from_l_pos_l!=undefined || tf.from_t_pos_l!=undefined"]
		[wm layer=1 canskip="%skip|false"]
		[backlay layer=1]
	[endif]
	[if exp="tf.from_r_pos_r!=undefined || tf.from_b_pos_r!=undefined || tf.from_l_pos_r!=undefined || tf.from_t_pos_r!=undefined"]
		[wm layer=2 canskip="%skip|false"]
		[backlay layer=2]
	[endif]
	[if exp="tf.from_r_pos_lc!=undefined || tf.from_b_pos_lc!=undefined || tf.from_l_pos_lc!=undefined || tf.from_t_pos_lc!=undefined"]
		[wm layer=3 canskip="%skip|false"]
		[backlay layer=3]
	[endif]
	[if exp="tf.from_r_pos_rc!=undefined || tf.from_b_pos_rc!=undefined || tf.from_l_pos_rc!=undefined || tf.from_t_pos_rc!=undefined"]
		[wm layer=4 canskip="%skip|false"]
		[backlay layer=4]
	[endif]
	[if exp="tf.from_r_pos_l!=undefined || tf.from_b_pos_c!=undefined || tf.from_l_pos_c!=undefined || tf.from_t_pos_c!=undefined"]
		[wm layer=5 canskip="%skip|false"]
		[backlay layer=5]
	[endif]
[eval exp="tf.from_r=undefined,tf.from_b=undefined,tf.from_l=undefined,tf.from_t=undefined, tf.from_r_pos_l=undefined, tf.from_r_pos_r=undefined, tf.from_r_pos_lc=undefined, tf.from_r_pos_rc=undefined, tf.from_r_pos_c=undefined, tf.from_b_pos_l=undefined, tf.from_b_pos_r=undefined, tf.from_b_pos_lc=undefined, tf.from_b_pos_rc=undefined, tf.from_b_pos_c=undefined, tf.from_l_pos_l=undefined, tf.from_l_pos_r=undefined, tf.from_l_pos_lc=undefined, tf.from_l_pos_rc=undefined, tf.from_l_pos_c=undefined, tf.from_t_pos_l=undefined, tf.from_t_pos_r=undefined, tf.from_t_pos_lc=undefined, tf.from_t_pos_rc=undefined, tf.from_t_pos_c=undefined"]
[endmacro]


// 立ち絵画像を、フレームアウトさせる
// [frameout to="フレームアウトの方向" pos="移動元のポジション" (time="移動時間|1000(デフォルト)" easing="実行スピードパターン)"]
//
// toには"top","left","bottom","right"が指定できます。"left"を指定すると左へフレームアウトします。
// posには"left","right","left_center","right_center","center"を指定できます。指定したポジションの立ち絵画像がtoで指定した方向へフレームアウトします。
// timeには実行時間を指定できます。省略すると1000ミリ秒で実行されます。
// easingには実行スピードパターンを指定できます。省略すると一定の速度で動きます。
[macro name="frameout"]
	[if exp="mp.to == 'left'"]
		[eval exp="tf.to_l = true"]
		[if exp="mp.pos=='left' || mp.pos=='l'"]
			[eval exp="tf.to_l_pos_l = true"]
			[eval exp="tf.to_l_pos_l_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_l_pos_l_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right' || mp.pos=='r'"]
			[eval exp="tf.to_l_pos_r = true"]
			[eval exp="tf.to_l_pos_r_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_l_pos_r_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='left_center' || mp.pos=='lc'"]
			[eval exp="tf.to_l_pos_lc = true"]
			[eval exp="tf.to_l_pos_lc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_l_pos_lc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right_center' || mp.pos=='rc'"]
			[eval exp="tf.to_l_pos_rc = true"]
			[eval exp="tf.to_l_pos_rc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_l_pos_rc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='center' || mp.pos=='c'"]
			[eval exp="tf.to_l_pos_c = true"]
			[eval exp="tf.to_l_pos_c_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_l_pos_c_easing = mp.easing"]
		[endif]
	[elsif exp="mp.to == 'top'"]
		[eval exp="tf.to_t = true"]
		[if exp="mp.pos=='left' || mp.pos=='l'"]
			[eval exp="tf.to_t_pos_l = true"]
			[eval exp="tf.to_t_pos_l_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_t_pos_l_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right' || mp.pos=='r'"]
			[eval exp="tf.to_t_pos_r = true"]
			[eval exp="tf.to_t_pos_r_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_t_pos_r_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='left_center' || mp.pos=='lc'"]
			[eval exp="tf.to_t_pos_lc = true"]
			[eval exp="tf.to_t_pos_lc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_t_pos_lc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right_center' || mp.pos=='rc'"]
			[eval exp="tf.to_t_pos_rc = true"]
			[eval exp="tf.to_t_pos_rc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_t_pos_rc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='center' || mp.pos=='c'"]
			[eval exp="tf.to_t_pos_c = true"]
			[eval exp="tf.to_t_pos_c_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_t_pos_c_easing = mp.easing"]
		[endif]
	[elsif exp="mp.to == 'right'"]
		[eval exp="tf.to_r = true"]
		[if exp="mp.pos=='left' || mp.pos=='l'"]
			[eval exp="tf.to_r_pos_l = true"]
			[eval exp="tf.to_r_pos_l_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_r_pos_l_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right' || mp.pos=='r'"]
			[eval exp="tf.to_r_pos_r = true"]
			[eval exp="tf.to_r_pos_r_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_r_pos_r_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='left_center' || mp.pos=='lc'"]
			[eval exp="tf.to_r_pos_lc = true"]
			[eval exp="tf.to_r_pos_lc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_r_pos_lc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right_center' || mp.pos=='rc'"]
			[eval exp="tf.to_r_pos_rc = true"]
			[eval exp="tf.to_r_pos_rc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_r_pos_rc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='center' || mp.pos=='c'"]
			[eval exp="tf.to_r_pos_c = true"]
			[eval exp="tf.to_r_pos_c_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_r_pos_c_easing = mp.easing"]
		[endif]
	[elsif exp="mp.to == 'bottom'"]
		[eval exp="tf.to_b = true"]
		[if exp="mp.pos=='left' || mp.pos=='l'"]
			[eval exp="tf.to_b_pos_l = true"]
			[eval exp="tf.to_b_pos_l_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_b_pos_l_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right' || mp.pos=='r'"]
			[eval exp="tf.to_b_pos_r = true"]
			[eval exp="tf.to_b_pos_r_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_b_pos_r_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='left_center' || mp.pos=='lc'"]
			[eval exp="tf.to_b_pos_lc = true"]
			[eval exp="tf.to_b_pos_lc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_b_pos_lc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='right_center' || mp.pos=='rc'"]
			[eval exp="tf.to_b_pos_rc = true"]
			[eval exp="tf.to_b_pos_rc_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_b_pos_rc_easing = mp.easing"]
		[endif]
		[if exp="mp.pos=='center' || mp.pos=='c'"]
			[eval exp="tf.to_b_pos_c = true"]
			[eval exp="tf.to_b_pos_c_time = (mp.time == undefined) ? 1000 : mp.time"]
			[eval exp="tf.to_b_pos_c_easing = mp.easing"]
		[endif]
	[endif]
[endmacro]

// [frameout]タグで指定したものを実行する
// [frameout_action skip="trueかfalse(デフォルト)"]
//
// skipにtrueを指定すると移動アニメーションをクリックでスキップできます。省略した場合はfalseになります。
[macro name="frameout_action"]
	[if exp="tf.to_l == true"]
		[if exp="tf.to_l_pos_l == true"]
			[anim layer=1 page="fore" time="&tf.to_l_pos_l_time" left="-1024" easing="&tf.to_l_pos_l_easing"]
			[animstart layer=1 page="fore"]
		[endif]
		[if exp="tf.to_l_pos_r == true"]
			[anim layer=2 page="fore" time="&tf.to_l_pos_r_time" left="-1024" easing="&tf.to_l_pos_r_easing"]
			[animstart layer=2 page="fore"]
		[endif]
		[if exp="tf.to_l_pos_lc == true"]
			[anim layer=3 page="fore" time="&tf.to_l_pos_lc_time" left="-1024" easing="&tf.to_l_pos_lc_easing"]
			[animstart layer=3 page="fore"]
		[endif]
		[if exp="tf.to_l_pos_rc == true"]
			[anim layer=4 page="fore" time="&tf.to_l_pos_rc_time" left="-1024" easing="&tf.to_l_pos_rc_easing"]
			[animstart layer=4 page="fore"]
		[endif]
		[if exp="tf.to_l_pos_c == true"]
			[anim layer=5 page="fore" time="&tf.to_l_pos_c_time" left="-1024" easing="&tf.to_l_pos_c_easing"]
			[animstart layer=5 page="fore"]
		[endif]
	[endif]
	[if exp="tf.to_t == true"]
		[if exp="tf.to_t_pos_l == true"]
			[anim layer=1 page="fore" time="&tf.to_t_pos_l_time" top="-768" easing="&tf.to_t_pos_l_easing"]
			[animstart layer=1 page="fore"]
		[endif]
		[if exp="tf.to_t_pos_r == true"]
			[anim layer=2 page="fore" time="&tf.to_t_pos_r_time" top="-768" easing="&tf.to_t_pos_r_easing"]
			[animstart layer=2 page="fore"]
		[endif]
		[if exp="tf.to_t_pos_lc == true"]
			[anim layer=3 page="fore" time="&tf.to_t_pos_lc_time" top="-768" easing="&tf.to_t_pos_lc_easing"]
			[animstart layer=3 page="fore"]
		[endif]
		[if exp="tf.to_t_pos_rc == true"]
			[anim layer=4 page="fore" time="&tf.to_t_pos_rc_time" top="-768" easing="&tf.to_t_pos_rc_easing"]
			[animstart layer=4 page="fore"]
		[endif]
		[if exp="tf.to_t_pos_c == true"]
			[anim layer=5 page="fore" time="&tf.to_t_pos_c_time" top="-768" easing="&tf.to_t_pos_c_easing"]
			[animstart layer=5 page="fore"]
		[endif]
	[endif]
	[if exp="tf.to_r == true"]
		[if exp="tf.to_r_pos_l == true"]
			[anim layer=1 page="fore" time="&tf.to_r_pos_l_time" left=1024 easing="&tf.to_r_pos_l_easing"]
			[animstart layer=1 page="fore"]
		[endif]
		[if exp="tf.to_r_pos_r == true"]
			[anim layer=2 page="fore" time="&tf.to_r_pos_r_time" left=1024 easing="&tf.to_r_pos_r_easing"]
			[animstart layer=2 page="fore"]
		[endif]
		[if exp="tf.to_r_pos_lc == true"]
			[anim layer=3 page="fore" time="&tf.to_r_pos_lc_time" left=1024 easing="&tf.to_r_pos_lc_easing"]
			[animstart layer=3 page="fore"]
		[endif]
		[if exp="tf.to_r_pos_rc == true"]
			[anim layer=4 page="fore" time="&tf.to_r_pos_rc_time" left=1024 easing="&tf.to_r_pos_rc_easing"]
			[animstart layer=4 page="fore"]
		[endif]
		[if exp="tf.to_r_pos_c == true"]
			[anim layer=5 page="fore" time="&tf.to_r_pos_c_time" left=1024 easing="&tf.to_r_pos_c_easing"]
			[animstart layer=5 page="fore"]
		[endif]
	[endif]
	[if exp="tf.to_b == true"]
		[if exp="tf.to_b_pos_l == true"]
			[anim layer=1 page="fore" time="&tf.to_b_pos_l_time" top=768 easing="&tf.to_b_pos_l_easing"]
			[animstart layer=1 page="fore"]
		[endif]
		[if exp="tf.to_b_pos_r == true"]
			[anim layer=2 page="fore" time="&tf.to_b_pos_r_time" top=768 easing="&tf.to_b_pos_r_easing"]
			[animstart layer=2 page="fore"]
		[endif]
		[if exp="tf.to_b_pos_lc == true"]
			[anim layer=3 page="fore" time="&tf.to_b_pos_lc_time" top=768 easing="&tf.to_b_pos_lc_easing"]
			[animstart layer=3 page="fore"]
		[endif]
		[if exp="tf.to_b_pos_rc == true"]
			[anim layer=4 page="fore" time="&tf.to_b_pos_rc_time" top=768 easing="&tf.to_b_pos_rc_easing"]
			[animstart layer=4 page="fore"]
		[endif]
		[if exp="tf.to_b_pos_c == true"]
			[anim layer=5 page="fore" time="&tf.to_b_pos_c_time" top=768 easing="&tf.to_b_pos_c_easing"]
			[animstart layer=5 page="fore"]
		[endif]
	[endif]
	[if exp="tf.to_r_pos_l!=undefined || tf.to_b_pos_l!=undefined || tf.to_l_pos_l!=undefined || tf.to_t_pos_l!=undefined"]
		[wm layer=1 canskip="%skip|false"]
		[freeimage layer=1 page="fore"]
		[freeimage layer=1 page="back"]
	[endif]
	[if exp="tf.to_r_pos_r!=undefined || tf.to_b_pos_r!=undefined || tf.to_l_pos_r!=undefined || tf.to_t_pos_r!=undefined"]
		[wm layer=2 canskip="%skip|false"]
		[freeimage layer=2 page="fore"]
		[freeimage layer=2 page="back"]
	[endif]
	[if exp="tf.to_r_pos_lc!=undefined || tf.to_b_pos_lc!=undefined || tf.to_l_pos_lc!=undefined || tf.to_t_pos_lc!=undefined"]
		[wm layer=3 canskip="%skip|false"]
		[freeimage layer=3 page="fore"]
		[freeimage layer=3 page="back"]
	[endif]
	[if exp="tf.to_r_pos_rc!=undefined || tf.to_b_pos_rc!=undefined || tf.to_l_pos_rc!=undefined || tf.to_t_pos_rc!=undefined"]
		[wm layer=4 canskip="%skip|false"]
		[freeimage layer=4 page="fore"]
		[freeimage layer=4 page="back"]
	[endif]
	[if exp="tf.to_r_pos_l!=undefined || tf.to_b_pos_c!=undefined || tf.to_l_pos_c!=undefined || tf.to_t_pos_c!=undefined"]
		[wm layer=5 canskip="%skip|false"]
		[freeimage layer=5 page="fore"]
		[freeimage layer=5 page="back"]
	[endif]
[eval exp="tf.to_l=undefined, tf.to_t=undefined, tf.to_r=undefined, tf.to_b=undefined, tf.to_l_pos_l=undefined, tf.to_l_pos_r=undefined, tf.to_l_pos_lc=undefined, tf.to_l_pos_rc=undefined, tf.to_l_pos_c=undefined, tf.to_t_pos_l=undefined, tf.to_t_pos_r=undefined, tf.to_t_pos_lc=undefined, tf.to_t_pos_rc=undefined, tf.to_t_pos_c=undefined, tf.to_r_pos_l=undefined, tf.to_r_pos_r=undefined, tf.to_r_pos_lc=undefined, tf.to_r_pos_rc=undefined, tf.to_r_pos_c=undefined, tf.to_b_pos_l=undefined, tf.to_b_pos_r=undefined, tf.to_b_pos_lc=undefined, tf.to_b_pos_rc=undefined, tf.to_b_pos_c=undefined"]
[endmacro]

// 立ち絵を他のポジションに移動します。
// 左端の画像を移動  [move_l]
// 右端の画像を移動  [move_r]
// 左寄りの画像を移動 [move_lc]
// 右寄りの画像を移動 [move_rc]
// 中心の画像を移動  [move_c]
// [move_l pos="移動先のポジション" (accel="加速度" time="移動時間")]
//
// accelには加速度的な動きを指定できます。1以上の数を指定すると徐々に加速しながら移動し、-1以下の数字を指定すると徐々に減速しながら移動します。0を指定した場合は一定の速さで移動します。
// timeは移動に掛ける時間を指定できます。timeを省略した場合は500ミリ秒になります。
// 移動先を設定し、[move_action]で実行して下さい。
// 移動先に画像がある場合は、移動元の画像に挿し変わりますので注意して下さい。

[macro name="move_l"]
	[if exp="almight.stage.fore.layers[1].getStorage(0) != undefined"]
		[if exp="mp.pos=='right'"]
			[eval exp="tf.pos_l = 'r'"]
		[elsif exp="mp.pos=='left_center'"]
			[eval exp="tf.pos_l = 'lc'"]
		[elsif exp="mp.pos=='right_center'"]
			[eval exp="tf.pos_l = 'rc'"]
		[elsif exp="mp.pos=='center'"]
			[eval exp="tf.pos_l = 'c'"]
		[else]
			[eval exp="tf.pos_l = mp.pos"]
		[endif]
		[eval exp="(mp.accel == undefined) ? tf.accel_l = 0 : tf.accel_l = mp.accel"]
		[eval exp="(mp.time == undefined) ? tf.time_l = 500 : tf.time_l = mp.time"]
		[eval exp="tf.nowImage_l = almight.stage.fore.layers[1].getStorage(0)"]
		[eval exp="tf.move_l_x = sf.pos_r" cond="mp.pos=='r' || mp.pos=='right'"]
		[eval exp="tf.move_l_x = sf.pos_lc" cond="mp.pos=='lc' || mp.pos=='left_center'"]
		[eval exp="tf.move_l_x = sf.pos_rc" cond="mp.pos=='rc' || mp.pos=='right_center'"]
		[eval exp="tf.move_l_x = sf.pos_c" cond="mp.pos=='c' || mp.pos=='center'"]
		[eval exp="tf.move_l_path = '('+tf.move_l_x+',0,255)'"]
	[endif]
[endmacro]

[macro name="move_r"]
	[if exp="almight.stage.fore.layers[2].getStorage(0) != undefined"]
		[if exp="mp.pos=='left'"]
			[eval exp="tf.pos_r = 'l'"]
		[elsif exp="mp.pos=='left_center'"]
			[eval exp="tf.pos_r = 'lc'"]
		[elsif exp="mp.pos=='right_center'"]
			[eval exp="tf.pos_r = 'rc'"]
		[elsif exp="mp.pos=='center'"]
			[eval exp="tf.pos_r = 'c'"]
		[else]
			[eval exp="tf.pos_r = mp.pos"]
		[endif]
		[eval exp="(mp.accel == undefined) ? tf.accel_r = 0 : tf.accel_r = mp.accel"]
		[eval exp="(mp.time == undefined) ? tf.time_r = 500 : tf.time_r = mp.time"]
		[eval exp="tf.nowImage_r = almight.stage.fore.layers[2].getStorage(0)"]
		[eval exp="tf.move_r_x = sf.pos_l" cond="mp.pos=='l' || mp.pos=='left'"]
		[eval exp="tf.move_r_x = sf.pos_lc" cond="mp.pos=='lc' || mp.pos=='left_center'"]
		[eval exp="tf.move_r_x = sf.pos_rc" cond="mp.pos=='rc' || mp.pos=='right_center'"]
		[eval exp="tf.move_r_x = sf.pos_c" cond="mp.pos=='c' || mp.pos=='center'"]
		[eval exp="tf.move_r_path = '('+tf.move_r_x+',0,255)'"]
	[endif]
[endmacro]

[macro name="move_lc"]
	[if exp="almight.stage.fore.layers[3].getStorage(0) != undefined"]
		[if exp="mp.pos=='left'"]
			[eval exp="tf.pos_lc = 'l'"]
		[elsif exp="mp.pos=='right'"]
			[eval exp="tf.pos_lc = 'r'"]
		[elsif exp="mp.pos=='right_center'"]
			[eval exp="tf.pos_lc = 'rc'"]
		[elsif exp="mp.pos=='center'"]
			[eval exp="tf.pos_lc = 'c'"]
		[else]
			[eval exp="tf.pos_lc = mp.pos"]
		[endif]
		[eval exp="(mp.accel == undefined) ? tf.accel_lc = 0 : tf.accel_lc = mp.accel"]
		[eval exp="(mp.time == undefined) ? tf.time_lc = 500 : tf.time_lc = mp.time"]
		[eval exp="tf.nowImage_lc = almight.stage.fore.layers[3].getStorage(0)"]
		[eval exp="tf.move_lc_x = sf.pos_l" cond="mp.pos=='l' || mp.pos=='left'"]
		[eval exp="tf.move_lc_x = sf.pos_r" cond="mp.pos=='r' || mp.pos=='right'"]
		[eval exp="tf.move_lc_x = sf.pos_rc" cond="mp.pos=='rc' || mp.pos=='right_center'"]
		[eval exp="tf.move_lc_x = sf.pos_c" cond="mp.pos=='c' || mp.pos=='center'"]
		[eval exp="tf.move_lc_path = '('+tf.move_lc_x+',0,255)'"]
	[endif]
[endmacro]

[macro name="move_rc"]
	[if exp="almight.stage.fore.layers[4].getStorage(0) != undefined"]
		[if exp="mp.pos=='left'"]
			[eval exp="tf.pos_rc = 'l'"]
		[elsif exp="mp.pos=='right'"]
			[eval exp="tf.pos_rc = 'r'"]
		[elsif exp="mp.pos=='left_center'"]
			[eval exp="tf.pos_rc = 'lc'"]
		[elsif exp="mp.pos=='center'"]
			[eval exp="tf.pos_rc = 'c'"]
		[else]
			[eval exp="tf.pos_rc = mp.pos"]
		[endif]
		[eval exp="(mp.accel == undefined) ? tf.accel_rc = 0 : tf.accel_rc = mp.accel"]
		[eval exp="(mp.time == undefined) ? tf.time_rc = 500 : tf.time_rc = mp.time"]
		[eval exp="tf.nowImage_rc = almight.stage.fore.layers[4].getStorage(0)"]
		[eval exp="tf.move_rc_x = sf.pos_l" cond="mp.pos=='l' || mp.pos=='left'"]
		[eval exp="tf.move_rc_x = sf.pos_r" cond="mp.pos=='r' || mp.pos=='right'"]
		[eval exp="tf.move_rc_x = sf.pos_lc" cond="mp.pos=='lc' || mp.pos=='left_center'"]
		[eval exp="tf.move_rc_x = sf.pos_c" cond="mp.pos=='c' || mp.pos=='center'"]
		[eval exp="tf.move_rc_path = '('+tf.move_rc_x+',0,255)'"]
	[endif]
[endmacro]

[macro name="move_c"]
	[if exp="almight.stage.fore.layers[5].getStorage(0) != undefined"]
		[if exp="mp.pos=='left'"]
			[eval exp="tf.pos_c = 'l'"]
		[elsif exp="mp.pos=='right'"]
			[eval exp="tf.pos_c = 'r'"]
		[elsif exp="mp.pos=='left_center'"]
			[eval exp="tf.pos_c = 'lc'"]
		[elsif exp="mp.pos=='right_center'"]
			[eval exp="tf.pos_c = 'rc'"]
		[else]
			[eval exp="tf.pos_c = mp.pos"]
		[endif]
		[eval exp="(mp.accel == undefined) ? tf.accel_c = 0 : tf.accel_c = mp.accel"]
		[eval exp="(mp.time == undefined) ? tf.time_c = 500 : tf.time_c = mp.time"]
		[eval exp="tf.nowImage_c = almight.stage.fore.layers[5].getStorage(0)"]
		[eval exp="tf.move_c_x = sf.pos_l" cond="mp.pos=='l' || mp.pos=='left'"]
		[eval exp="tf.move_c_x = sf.pos_r" cond="mp.pos=='r' || mp.pos=='right'"]
		[eval exp="tf.move_c_x = sf.pos_lc" cond="mp.pos=='lc' || mp.pos=='left_center'"]
		[eval exp="tf.move_c_x = sf.pos_rc" cond="mp.pos=='rc' || mp.pos=='right_center'"]
		[eval exp="tf.move_c_path = '('+tf.move_c_x+',0,255)'"]
	[endif]
[endmacro]

// 立ち絵の移動を実行します。
// [move_action　skip="trueまたはfalse(デフォルト)]
//
// [move_l], [move_r], [move_lc], [move_rc], [move_c] で指定した移動先へ立ち絵を移動します。
// skipにtrueを指定すると、立ち絵の移動処理がクリックでスキップ可能になります。
[macro name="move_action"]
	[move layer=1 page="fore" time="&tf.time_l" accel="&tf.accel_l" path="&tf.move_l_path" cond="tf.move_l_x!=undefined"]
	[move layer=2 page="fore" time="&tf.time_r" accel="&tf.accel_r" path="&tf.move_r_path" cond="tf.move_r_x!=undefined"]
	[move layer=3 page="fore" time="&tf.time_lc" accel="&tf.accel_lc" path="&tf.move_lc_path" cond="tf.move_lc_x!=undefined"]
	[move layer=4 page="fore" time="&tf.time_rc" accel="&tf.accel_rc" path="&tf.move_rc_path" cond="tf.move_rc_x!=undefined"]
	[move layer=5 page="fore" time="&tf.time_c" accel="&tf.accel_c" path="&tf.move_c_path" cond="tf.move_c_x!=undefined"]
	[wm layer=1 canskip="%skip|false" cond="tf.move_l_x!=undefined"]
	[wm layer=2 canskip="%skip|false" cond="tf.move_r_x!=undefined"]
	[wm layer=3 canskip="%skip|false" cond="tf.move_lc_x!=undefined"]
	[wm layer=4 canskip="%skip|false" cond="tf.move_rc_x!=undefined"]
	[wm layer=5 canskip="%skip|false" cond="tf.move_c_x!=undefined"]
	[backlay]
	[image storage="&tf.nowImage_l" layer=2 page="back" pos="right" visible=true cond="tf.pos_l=='r'"]
	[image storage="&tf.nowImage_l" layer=3 page="back" pos="left_center" visible=true cond="tf.pos_l=='lc'"]
	[image storage="&tf.nowImage_l" layer=4 page="back" pos="right_center" visible=true cond="tf.pos_l=='rc'"]
	[image storage="&tf.nowImage_l" layer=5 page="back" pos="center" visible=true cond="tf.pos_l=='c'"]
	[image storage="&tf.nowImage_r" layer=1 page="back" pos="left" visible=true cond="tf.pos_r=='l'"]
	[image storage="&tf.nowImage_r" layer=3 page="back" pos="left_center" visible=true cond="tf.pos_r=='lc'"]
	[image storage="&tf.nowImage_r" layer=4 page="back" pos="right_center" visible=true cond="tf.pos_r=='rc'"]
	[image storage="&tf.nowImage_r" layer=5 page="back" pos="center" visible=true cond="tf.pos_r=='c'"]
	[image storage="&tf.nowImage_lc" layer=1 page="back" pos="left" visible=true cond="tf.pos_lc=='l'"]
	[image storage="&tf.nowImage_lc" layer=2 page="back" pos="right" visible=true cond="tf.pos_lc=='r'"]
	[image storage="&tf.nowImage_lc" layer=4 page="back" pos="right_center" visible=true cond="tf.pos_lc=='rc'"]
	[image storage="&tf.nowImage_lc" layer=5 page="back" pos="center" visible=true cond="tf.pos_lc=='c'"]
	[image storage="&tf.nowImage_rc" layer=1 page="back" pos="left" visible=true cond="tf.pos_rc=='l'"]
	[image storage="&tf.nowImage_rc" layer=2 page="back" pos="right" visible=true cond="tf.pos_rc=='r'"]
	[image storage="&tf.nowImage_rc" layer=3 page="back" pos="left_center" visible=true cond="tf.pos_rc=='lc'"]
	[image storage="&tf.nowImage_rc" layer=5 page="back" pos="center" visible=true cond="tf.pos_rc=='c'"]
	[image storage="&tf.nowImage_c" layer=1 page="back" pos="left" visible=true cond="tf.pos_c=='l'"]
	[image storage="&tf.nowImage_c" layer=2 page="back" pos="right" visible=true cond="tf.pos_c=='r'"]
	[image storage="&tf.nowImage_c" layer=3 page="back" pos="left_center" visible=true cond="tf.pos_c=='lc'"]
	[image storage="&tf.nowImage_c" layer=4 page="back" pos="right_center" visible=true cond="tf.pos_c=='rc'"]
	[trans method="crossfade" time=300]
	[wt canskip=true]
	[freeimage layer=1 page="fore" cond="tf.move_l_x!=undefined && tf.pos_r!='l' && tf.pos_lc!='l' && tf.pos_rc!='l' && tf.pos_c!='l'"]
	[freeimage layer=2 page="fore" cond="tf.move_r_x!=undefined && tf.pos_l!='r' && tf.pos_lc!='r' && tf.pos_rc!='r' && tf.pos_c!='r'"]
	[freeimage layer=3 page="fore" cond="tf.move_lc_x!=undefined && tf.pos_l!='lc' && tf.pos_r!='lc' && tf.pos_rc!='lc' && tf.pos_c!='lc'"]
	[freeimage layer=4 page="fore" cond="tf.move_rc_x!=undefined && tf.pos_l!='rc' && tf.pos_r!='rc' && tf.pos_lc!='rc' && tf.pos_c!='rc'"]
	[freeimage layer=5 page="fore" cond="tf.move_c_x!=undefined && tf.pos_l!='c' && tf.pos_r!='c' && tf.pos_lc!='c' && tf.pos_rc!='c'"]
	[backlay]
	[eval exp="tf.move_l_x=undefined, tf.move_r_x=undefined, tf.move_lc_x=undefined, tf.move_rc_x=undefined, tf.move_c_x=undefined, tf.pos_l=undefined, tf.pos_r=undefined, tf.pos_lc=undefined, tf.pos_rc=undefined, tf.pos_c=undefined"]
[endmacro]

// カットインを行います。
// [cutin file="ファイル名" (left="左端位置|0(デフォルト)" top="上端位置|0(デフォルト)" from="カットインの方向" time="実行時間|250(デフォルト)" easing="実行スピードパターン" skip="trueかfalse")]
//　
// left,topはカットインした画像が停止する位置をpxで指定します。省略するとどちらも0となります。
// fromには"left","right","top","bottom"を指定できます。省略した場合は"right"からカットインします。
// timeには実行時間を指定できます。省略した場合は250ミリ秒で実行されます。
// easingには実行スピードパターンを指定できます。省略した場合は一定の速度で動きます。
// skipにtrueを指定した場合は移動アニメーションをクリックでスキップできます。省略した場合はfalseになります。
// pngの場合のみ拡張子は省略可能になります
[macro name="cutin"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.png' : mp.file"]
	[if exp="mp.from == 'left'"]
		[image storage="%file" layer=6 page="fore" left="-1024" top="%top|0" visible=true]
		[anim layer=6 page="fore" time="%time|250" left="%left|0" top="%top|0" easing="%easing"]
	[elsif exp="mp.from == 'top'"]
		[image storage="%file" layer=6 page="fore" left="%left|0" top="-768" visible=true]
		[anim layer=6 page="fore" time="%time|250"  left="%left|0" top="%top|0" easing="%easing"]
	[elsif exp="mp.from == 'bottom'"]
		[image storage="%file" layer=6 page="fore" left="left|0" top=768 visible=true]
		[anim layer=6 page="fore" time="%time|250"  left="%left|0" top="%top|0" easing="%easing"]
	[else]
		[image storage="%file" layer=6 page="fore" left=1024 top="%top|0" visible=true]
		[anim layer=6 page="fore" time="%time|250"  left="%left|0" top="%top|0" easing="%easing"]
	[endif]
	[animstart layer=6 page="fore"]
	[wm layer=6 canskip="%skip|false"]
	[backlay layer=6]
[endmacro]

// カットアウトを行います。
// [cutout (left="左端位置|0(デフォルト)" top="上端位置|0(デフォルト)" to="カットアウトさせる方向" time="実行時間|250(デフォルト)" easing="実行スピードパターン" skip="trueかfalse")]
//
// left,topはカットインした画像がカットアウトする先の停止位置をpxで指定します。省略するとどちらも0となります。
// カットインでleftとtopに値を指定した場合は、カットアウトにも同様の数値を指定するようにしてください。
// toには"left","right","top","bottom"を指定できます。省略した場合は"left"へカットアウトします。
// timeには実行時間を指定できます。省略した場合は250ミリ秒で実行されます。
// easingには実行スピードパターンを指定できます。省略した場合は一定の速度で動きます。
// skipにtrueを指定した場合は移動アニメーションをクリックでスキップできます。省略した場合はfalseになります。
[macro name="cutout"]
	[if exp="mp.to == 'right'"]
		[anim layer=6 page="fore" time="%time|250" left=1024 top="%top|0" easing="%easing"]
	[elsif exp="mp.to == 'top'"]
		[anim layer=6 page="fore" time="%time|250" left="%left|0" top="-768" easing="%easing"]
	[elsif exp="mp.to == 'bottom'"]
		[anim layer=6 page="fore" time="%time|250" left="%left|0" top=768 easing="%easing"]
	[else]
		[anim layer=6 page="fore" time="%time|250" left="-1024" top="%top|0" easing="%easing"]
	[endif]
	[animstart layer=6 page="fore"]
	[wm layer=6 canskip="%skip|false"]
	[freeimage layer=6 page="fore"]
	[freeimage layer=6 page="back"]
[endmacro]

// 画面揺らし効果を行います。
// 背景          [quake_bg]
// メッセージレイヤー  [quake_msg]
// 左端          [quake_l]
// 右端          [quake_r]
// 左寄り         [quake_lc]
// 右寄り         [quake_rc]
// 中心          [quake_c]
// すべて         [quake_all]
// [quake_bg time="揺らす長さ" hmax="横揺れの幅" vmax="縦揺れの幅" interval="揺れの反復"]
//
// timeをに時間を指定すると、揺らし効果の持続時間を指定できます。timeを省略すると500ミリ秒になります。
// hmaxには縦揺れの幅を指定できます。hmaxを省略すると10になります。vmaxには横揺れの幅を指定できます。vmaxを省略すると10になります。
// intervalには揺れの反復する時間を指定できます。intervalを省略した場合は30ミリ秒になります。
// 揺れの設定を指定して、[quake_action]で実行して下さい。

[macro name="quake_bg"]
	[eval exp="(mp.time == undefined) ? tf.quake_bg_time = 500 : tf.quake_bg_time = mp.time"]
	[eval exp="(mp.hmax == undefined) ? tf.quake_bg_hmax = 10 : tf.quake_bg_hmax = mp.hmax"]
	[eval exp="(mp.vmax == undefined) ? tf.quake_bg_vmax = 10 : tf.quake_bg_vmax = mp.vmax"]
	[eval exp="(mp.interval == undefined) ? tf.quake_bg_interval = 30 : tf.quake_bg_interval = mp.interval"]
[endmacro]

[macro name="quake_msg"]
	[eval exp="(mp.time == undefined) ? tf.quake_msg_time = 500 : tf.quake_msg_time = mp.time"]
	[eval exp="(mp.hmax == undefined) ? tf.quake_msg_hmax = 10 : tf.quake_msg_hmax = mp.hmax"]
	[eval exp="(mp.vmax == undefined) ? tf.quake_msg_vmax = 10 : tf.quake_msg_vmax = mp.vmax"]
	[eval exp="(mp.interval == undefined) ? tf.quake_msg_interval = 30 : tf.quake_msg_interval = mp.interval"]
[endmacro]

[macro name="quake_l"]
	[eval exp="(mp.time == undefined) ? tf.quake_l_time = 500 : tf.quake_l_time = mp.time"]
	[eval exp="(mp.hmax == undefined) ? tf.quake_l_hmax = 10 : tf.quake_l_hmax = mp.hmax"]
	[eval exp="(mp.vmax == undefined) ? tf.quake_l_vmax = 10 : tf.quake_l_vmax = mp.vmax"]
	[eval exp="(mp.interval == undefined) ? tf.quake_l_interval = 30 : tf.quake_l_interval = mp.interval"]
[endmacro]

[macro name="quake_r"]
	[eval exp="(mp.time == undefined) ? tf.quake_r_time = 500 : tf.quake_r_time = mp.time"]
	[eval exp="(mp.hmax == undefined) ? tf.quake_r_hmax = 10 : tf.quake_r_hmax = mp.hmax"]
	[eval exp="(mp.vmax == undefined) ? tf.quake_r_vmax = 10 : tf.quake_r_vmax = mp.vmax"]
	[eval exp="(mp.interval == undefined) ? tf.quake_r_interval = 30 : tf.quake_r_interval = mp.interval"]
[endmacro]

[macro name="quake_lc"]
	[eval exp="(mp.time == undefined) ? tf.quake_lc_time = 500 : tf.quake_lc_time = mp.time"]
	[eval exp="(mp.hmax == undefined) ? tf.quake_lc_hmax = 10 : tf.quake_lc_hmax = mp.hmax"]
	[eval exp="(mp.vmax == undefined) ? tf.quake_lc_vmax = 10 : tf.quake_lc_vmax = mp.vmax"]
	[eval exp="(mp.interval == undefined) ? tf.quake_lc_interval = 30 : tf.quake_lc_interval = mp.interval"]
[endmacro]

[macro name="quake_rc"]
	[eval exp="(mp.time == undefined) ? tf.quake_rc_time = 500 : tf.quake_rc_time = mp.time"]
	[eval exp="(mp.hmax == undefined) ? tf.quake_rc_hmax = 10 : tf.quake_rc_hmax = mp.hmax"]
	[eval exp="(mp.vmax == undefined) ? tf.quake_rc_vmax = 10 : tf.quake_rc_vmax = mp.vmax"]
	[eval exp="(mp.interval == undefined) ? tf.quake_rc_interval = 30 : tf.quake_rc_interval = mp.interval"]
[endmacro]

[macro name="quake_c"]
	[eval exp="(mp.time == undefined) ? tf.quake_c_time = 500 : tf.quake_c_time = mp.time"]
	[eval exp="(mp.hmax == undefined) ? tf.quake_c_hmax = 10 : tf.quake_c_hmax = mp.hmax"]
	[eval exp="(mp.vmax == undefined) ? tf.quake_c_vmax = 10 : tf.quake_c_vmax = mp.vmax"]
	[eval exp="(mp.interval == undefined) ? tf.quake_c_interval = 30 : tf.quake_c_interval = mp.interval"]
[endmacro]

[macro name="quake_all"]
	[eval exp="(mp.time == undefined) ? tf.quake_all_time = 500 : tf.quake_all_time = mp.time"]
	[eval exp="(mp.hmax == undefined) ? tf.quake_all_hmax = 10 : tf.quake_all_hmax = mp.hmax"]
	[eval exp="(mp.vmax == undefined) ? tf.quake_all_vmax = 10 : tf.quake_all_vmax = mp.vmax"]
	[eval exp="(mp.interval == undefined) ? tf.quake_bg_interval = 30 : tf.quake_bg_interval = mp.interval"]
[endmacro]

// 処理を実行する
// [quake_action skip="trueまたはfalse(デフォルト)"]
//
// 	skipにtrueを指定すると、画面揺らし効果がクリックでスキップ可能になります

[macro name="quake_action"]
	[quake time="&tf.quake_bg_time" hmax="&tf.quake_bg_hmax" vmax="&tf.quake_bg_vmax" interval="&tf.quake_bg_interval" layer="base" cond="tf.quake_bg_time!=undefined"]
	[quake time="&tf.quake_msg_time" hmax="&tf.quake_msg_hmax" vmax="&tf.quake_msg_vmax" interval="&tf.quake_msg_interval" layer="message0" cond="tf.quake_msg_time!=undefined"]
	[quake time="&tf.quake_l_time" hmax="&tf.quake_l_hmax" vmax="&tf.quake_l_vmax" interval="&tf.quake_l_interval" layer=1 cond="tf.quake_l_time!=undefined"]
	[quake time="&tf.quake_r_time" hmax="&tf.quake_r_hmax" vmax="&tf.quake_r_vmax" interval="&tf.quake_r_interval" layer=2 cond="tf.quake_r_time!=undefined"]
	[quake time="&tf.quake_lc_time" hmax="&tf.quake_lc_hmax" vmax="&tf.quake_lc_vmax" interval="&tf.quake_lc_interval" layer=3 cond="tf.quake_lc_time!=undefined"]
	[quake time="&tf.quake_rc_time" hmax="&tf.quake_rc_hmax" vmax="&tf.quake_rc_vmax" interval="&tf.quake_rc_interval" layer=4 cond="tf.quake_rc_time!=undefined"]
	[quake time="&tf.quake_c_time" hmax="&tf.quake_c_hmax" vmax="&tf.quake_c_vmax" interval="&tf.quake_c_interval" layer=5 cond="tf.quake_c_time!=undefined"]
	[quake time="&tf.quake_all_time" hmax="&tf.quake_all_hmax" vmax="&tf.quake_all_vmax" interval="&tf.quake_all_interval" cond="tf.quake_all_time!=undefined"]
	[wq layer="base" canskip="&tf.quake_bg_skip" cond="tf.quake_bg_time!=undefined"]
	[wq layer="message0" canskip="&tf.quake_msg_skip" cond="tf.quake_msg_time!=undefined"]
	[wq layer=1 canskip="%skip|false" cond="tf.quake_l_time!=undefined"]
	[wq layer=2 canskip="%skip|false" cond="tf.quake_r_time!=undefined"]
	[wq layer=3 canskip="%skip|false" cond="tf.quake_lc_time!=undefined"]
	[wq layer=4 canskip="%skip|false" cond="tf.quake_rc_time!=undefined"]
	[wq layer=5 canskip="%skip|false" cond="tf.quake_c_time!=undefined"]
	[wq canskip="&tf.quake_all_skip" cond="tf.quake_all_time!=undefined"]
	[eval exp="tf.quake_bg_time = undefined, tf.quake_msg_time = undefined, tf.quake_l_time = undefined, tf.quake_r_time = undefined, tf.quake_lc_time = undefined, tf.quake_rc_time = undefined, tf.quake_c_time = undefined, tf.quake_all_time = undefined"]
[endmacro]

// ===== サウンド操作 =====

// BGMを再生する
// [play_bgm file="ファイル名" (time="フェードイン時間" wait="trueかfalse(デフォルト)" loop="true(デフォルト)かfalse")]
//
// 	BGMをフェードインで再生したい場合は、timeにミリ秒を指定します
// 	また、その際にwaitを指定するとフェードイン完了を待つかどうか指定できます。省略すると待ちません。
// 	loopにtrueかfalseを指定すると、BGMをループ再生するか指定出来ます。省略するとループします。
// 	oggの場合のみ拡張子は省略可能になります

[macro name="play_bgm"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.ogg' : mp.file"]
	[if exp="mp.time != undefined"]
		[fadeinbgm storage="%file" time="%time" loop="%loop|true"]
		[wb canskip="false" cond="mp.wait|false"]
	[else]
		[playbgm storage="%file" loop="%loop|true"]
	[endif]
[endmacro]

// BGMを停止する
// [stop_bgm (time="フェードアウト時間" wait="trueかfalse(デフォルト)")]
//
// 	BGMをフェードアウトで停止したい場合は、timeにミリ秒を指定します。
// 	また、その際にwaitを指定するとフェードアウト完了を待つかどうか指定できます。省略すると待ちません。

[macro name="stop_bgm"]
	[if exp="mp.time != undefined"]
		[fadeoutbgm time="%time"]
		[wb canskip="false" cond="mp.wait|false"]
	[else]
		[stopbgm]
	[endif]
[endmacro]

// SEを再生する
// [play_se file="ファイル名" (time="フェードイン時間" wait="trueかfalse(デフォルト)" loop="trueかfalse(デフォルト)")]
//
// 	SEをフェードインで再生したい場合は、timeにミリ秒を指定します。
// 	また、その際にwaitを指定するとフェードイン完了を待つかどうか指定できます。省略すると待ちません。
// 	loopにtrueかfalseを指定すると、SEをループ再生するかどうか指定出来ます。省略するとループしません。
// 	oggの場合のみ拡張子は省略可能になります

[macro name="play_se"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.ogg' : mp.file"]
	[if exp="mp.time != undefined"]
		[fadeinse buf=1 storage="%file" time="%time" loop="%loop|false" cond="!almight.stage.skipping"]
		[wf buf=1 canskip="false" cond="mp.wait|false"]
	[else]
		[playse buf=1 storage="%file" loop="%loop|false" cond="!almight.stage.skipping"]
	[endif]
[endmacro]

// SEを停止する
// [stop_se (time="フェードイン時間" wait="trueかfalse(デフォルト)")]
//
// 	SEをフェードアウトで停止したい場合は、timeにミリ秒を指定します。
// 	また、その際にwaitを指定するとフェードアウト完了を待つかどうか指定できます。省略すると待ちません。

[macro name="stop_se"]
	[if exp="mp.time != undefined"]
		[fadeoutse buf=1 time="%time"]
		[wf buf=1 canskip="false" cond="mp.wait|false"]
	[else]
		[stopse buf=1]
	[endif]
[endmacro]

// ボイスを再生する
// [play_voice file="ファイル名"]
//
// 	[voice]を使ったあとは、必ず[c]でテキストを閉じてください
// 	挟まれたテキストはメッセージ履歴でクリック可能になり、ボイスを再度再生可能になります
// 	oggの場合のみ拡張子は省略可能になります

[macro name="play_voice"]
	[seopt buf=2 gvolume=0 cond="f.bgv_pause==true"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.ogg' : mp.file"]
	[hact exp="&hactVoice()"]
	[playse buf=0 storage="%file" cond="!almight.stage.skipping"]
[endmacro]

// ボイスを停止する
// [stop_voice]
//
// 	再生中の場合、ボイスを停止します

[macro name="stop_voice"]
	[stopse buf=0]
	[seopt buf=2 gvolume=100 cond="f.bgv_pause==true"]
[endmacro]

// 環境音をループ再生します
//[play_bgv file="ファイル名" (time="フェードイン時間" wait="trueかfalse(デフォルト)" pause="trueかfalse(デフォルト)")]
//
// 環境音をフェードインで再生したい場合は、timeにミリ秒を指定します。
// また、その際にwaitを指定するとフェードイン完了を待つかどうか指定できます。省略すると待ちません。
// pauseにtrueを指定するとボイス再生中にBGVのボリュームを0にします。
// [c]を使うとボリュームが100に戻ります。
// pauseを省略するとボイス再生中もBGVが再生されたままになります。
// oggの場合のみ拡張子は省略可能になります

[macro name="play_bgv"]
	[eval exp="mp.file = (mp.file.indexOf('.') === -1) ? mp.file + '.ogg' : mp.file"]
	[eval exp="(mp.pause == undefined) ? f.bgv_pause = false : f.bgv_pause = mp.pause"]
	[if exp="mp.time != undefined"]
		[fadeinse buf=2 storage="%file" time="%time" loop=true]
		[wf buf=2 canskip="false" cond="mp.wait|false"]
	[else]
		[playse buf=2 storage="%file" loop=true]
	[endif]
[endmacro]

// 環境音を停止する
// [stop_bgv (time="フェードイン時間" wait="trueかfalse(デフォルト)")]
//
// 	環境音をフェードアウトで停止したい場合は、timeにミリ秒を指定します。
// 	また、その際にwaitを指定するとフェードアウト完了を待つかどうか指定できます。省略すると待ちません。

[macro name="stop_bgv"]
	[if exp="mp.time != undefined"]
		[fadeoutse buf=2 time="%time"]
		[wf buf=2 canskip="false" cond="mp.wait|false"]
	[else]
		[stopse buf=2]
	[endif]
	[eval exp="f.bgv_pause = false"]
[endmacro]


// メッセージ履歴でのボイス再生用
[iscript]
function hactVoice() {
	return 'almight.se[0].setPlay({storage:"'+almight.path(mp.file)+'", loop:false})';
}
[endscript]

[eval exp="almight.debug = tf.debug;"]

[return]
